import { appendFileSync, readFileSync, writeFileSync } from "fs";
import { Player } from "../models/players.js";
import { Op } from "sequelize";

export const addPlayers = async (req, res) => {
  try {
    // Try and create a new player
    const player = await Player.create(req.body);
    //return teh autogenerated id from the DB
    res.status(201).send({ data: `player ID; ${player.id} created` });
  } catch (error) {
    // if there is an error we will send back the message
    res.status(403).send(error.message);
  }
};

export const getPlayers = async (req, res) => {
  const { first_name, team } = req.query;

  const query = { where: {} };

  if (first_name) {
    query.where.first_name = { [Op.like]: `%${first_name}%` };
  }
  //http://localhost:3001/players?name=xa (query param for searching by name)

  if (team) {
    query.where.team = { [Op.eq]: team };
  }

  try {
    const players = await Player.findAll(query);
    res.send(players);
  } catch (error) {
    res.status(404).send(error.message);
  }
};

export const getPlayerById = async (req, res) => {
  const playerId = parseInt(req.params.id);
  try {
    const player = await Player.findByPk(playerId);

    if (player === null) {
      throw new Error("player not found");
    }
    res.send(player);
  } catch (error) {
    res.status(404).send(error.message);
  }
};

export const removePlayerById = async (req, res) => {
  const id = parseInt(req.params.id);

  try {
    const player = await Player.destroy({
      where: {
        id: id,
      },
    });
    if (!player) {
      throw new Error("player not found");
    }
    res.status(204).send("player updated");
  } catch (error) {
    res.status(404).send("player not found!");
  }
};

export const updatePlayerById = async (req, res) => {
  const id = parseInt(req.params.id);

  try {
    const player = await Player.update(req.body, {
      where: {
        id: id,
      },
    });
    console.log(player);
    if (player[1] === 0) {
      throw new Error("player not found");
    }

    res.status("player updated");
  } catch (error) {
    res.status(404).send("player not found!");
  }
};
